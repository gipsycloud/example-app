name: Main CI
on:
  push:
    branches:
      - main
      - develop
      - feat/**
      - feature/**
  workflow_dispatch:

env:
  NODE_VERSION: 18

jobs:
  repo-meta:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.container-image.outputs.IMAGE_NAME }}
      repo_name: ${{ steps.repository-name.outputs.REPO_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract repository's name
        id: repository-name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Create image name
        id: container-image
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//_/g')
          IMAGE_NAME=${BRANCH_NAME}_${{ github.sha }}
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./express-backend
        run: npm install

      - name: Run unit tests
        working-directory: ./express-backend
        run: npm test

  format-code:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./express-backend
        run: npm install

      - name: Run formatting check (Prettier)
        working-directory: ./express-backend
        run: npx prettier --write .

      - name: Push code
        working-directory: ./express-backend
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          if [[ $(git status --porcelain) ]]; then
            if ! git add .; then
              echo "Error: Failed to stage files"
            fi

            if ! git commit -m "Updated from ref: ${{ github.sha }}"; then
              echo "Error: Failed to commit files"
            fi

            if ! git push 2>&1 | tee push.log; then
              if grep -q "403" push.log; then
                echo "Error: Permission denied (HTTP 403). Exiting."
                exit 1
              fi

              if ! git pull --rebase && git push; then
                echo "Error: failed to push the code after rebase."
                exit 1
              fi
            fi
          else
            echo "Nothing to commit."
          fi

  containerize-backend:
    needs: [repo-meta, format-code]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ./express-backend
          file: ./express-backend/Dockerfile
          push: true
          tags: |
            docker.io/${{ vars.DOCKERHUB_USERNAME }}/backend:${{ needs.repo-meta.outputs.image_name }}

  containerize-frontend:
    needs: [repo-meta, format-code]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ./react-frontend
          file: ./react-frontend/Dockerfile
          push: true
          tags: |
            docker.io/${{ vars.DOCKERHUB_USERNAME }}/frontend:${{ needs.repo-meta.outputs.image_name }}

  # deploy-code:
  #   needs: [repo-meta, containerize-backend, containerize-frontend]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3

  #     - name: Run terraform create
  #       working-directory: ./infrastructure
  #       run: |
  #         BACKEND_IMAGE_ID="docker.io/${{ vars.DOCKERHUB_USERNAME }}/backend:${{ needs.repo-meta.outputs.image_name }}"
  #         FRONTEND_IMAGE_ID="docker.io/${{ vars.DOCKERHUB_USERNAME }}/frontend:${{ needs.repo-meta.outputs.image_name }}"

  #         terraform init
  #         sed -i "s#{{BACKEND_IMAGE_ID}}#${BACKEND_IMAGE_ID}#g" ./configs/docker.sh
  #         sed -i "s#{{FRONTEND_IMAGE_ID}}#${FRONTEND_IMAGE_ID}#g" ./configs/docker.sh
  #         terraform apply -auto-approve
